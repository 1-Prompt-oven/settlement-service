name: CI/CD
on:
  push:
    branches: [ "main" ]
permissions:
  contents: write
  id-token: write
  security-events: write
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: '8.10'
          dependency-graph: generate-and-submit
      ## gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle 8.10
        run: gradle build -x test -Pspring.profiles.active=prod

      - name: Docker build and push
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/settlement-service . 
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/settlement-service

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/settlement-service
            sudo docker stop settlement-service || true
            sudo docker rm -f settlement-service || true
            cd /home/ubuntu/settlement-service
            echo "SPRING_PROFILES_ACTIVE=prod" > .env
            sudo docker-compose up -d
            sudo docker image prune -f

            

